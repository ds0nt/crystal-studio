name: Crystal Studio
description: CLI of [Crystal](https://crystal.sh), the open source code generator for every language and framework
version: 0.1.0
author:
  name: Chris Tate
  email: chris@crystal.sh
  url: http://crystal.sh
copyright: 2015 Crystal
imports:
  crystal/angular: ~0.1.0
  crystal/authors: ~0.2.5
  crystal/bower: ~0.3.5
  crystal/electron: ~0.1.1
  crystal/gitignore: ~0.1.1
  crystal/jade: ~0.1.0
  crystal/json: ~0.3.2
  crystal/license: ~0.2.4
  crystal/npm: ~0.2.5
  crystal/readme: ~0.2.2
outputs:
  - generator: angular.AppGenerator
    filename: scripts/app.js
    spec:
      name: CrystalApp
      requires:
        - ngMaterial
        - schemaForm
        - ui.codemirror
      directives:
        resize: |
          function($window) {
            return function (scope, element) {
              var w = angular.element($window);
              
              w.bind('resize', function () {
                var editor = document.getElementsByClassName('CodeMirror')[0];
                editor.style.height = w[0].outerHeight - 86;
              });
            };
          }
      controllers:
        AppCtrl:
          requires:
            - $mdDialog
            - $mdSidenav
            - $scope
            - $window
            - schemaForm
          locals:
            $scope:
              getFolders: |
                function() {
                  var fs = require('fs'),
                    path = require('path'),
                    userHome = require('user-home');
                  var workspace = path.join(userHome, '.crystal/dev');
                  var folders = fs.readdirSync(workspace).filter(function(file) {
                    return fs.statSync(path.join(workspace, file)).isDirectory();
                  });
                  return folders;
                }
              folders: $scope.getFolders()
              dir: process.cwd()
              runIcon: "'images/run.svg'"
              runningModules: '[]'
              buildProject: |
                function(ev) {
                  $scope.alert = $mdDialog.alert()
                    .parent(angular.element(document.body))
                    .title('Building...')
                    .targetEvent(ev);
                  $mdDialog.show($scope.alert);
                  
                  $scope.project.build({ path: $scope.dir }, function() {
                    $mdDialog.hide($scope.alert, 'finish');
                  });
                }
              loadModule: |
                function(folder) {
                  $mdSidenav('left').toggle();
                  
                  var fs = require('fs'),
                    path = require('path'),
                    userHome = require('user-home');
                  var workspace = path.join(userHome, '.crystal/dev');
                  var module_path = path.join(workspace, folder);
                  
                  $scope.dir = module_path;
                  $scope.project = new crystal();
                  $scope.selectedFolder = folder;
                  
                  $scope.config = $scope.project.config($scope.dir);
                  console.log($scope.config);
                  
                  if ($scope.runningModules.indexOf(folder) !== -1) {
                    $scope.runIcon = 'images/stop.svg';
                  } else { 
                    $scope.runIcon = 'images/run.svg';
                  }
                  
                  var yaml = fs.readFileSync($scope.dir + '/.crystal/config.yml', 'utf-8');
                  var editor = document.getElementsByClassName('CodeMirror')[0].CodeMirror;
                  editor.setValue(yaml);
                  
                  angular.element($window).trigger('resize');
                };
              openFile: |
                function() {
                  $mdSidenav('left').toggle();
                  return;
                  dialog.showOpenDialog({ properties: ['openDirectory'] }, function(files) {
                    var dir = files[0];
                    $scope.dir = dir;
                    $scope.project = new crystal();
                    
                    $scope.config = $scope.project.config(dir);
                    
                    var code = document.getElementById('code');
                    if (code) {
                      if (!$scope.editor) {
                        $scope.editor = CodeMirror.fromTextArea(code, {
                          mode: 'yaml',
                          lineNumbers: true
                        });
                      }
                    var yaml = jsyaml.safeDump($scope.config);
                      $scope.editor.getDoc().setValue(yaml);
                    }
                    
                    $scope.$apply();
                  });
                };
              runProject: |
                function(ev) {
                  $scope.runningModules.push($scope.selectedFolder);
                  
                  if ($scope.running) {
                    $scope.running = false;
                    $scope.runIcon = 'images/run.svg';
                    $scope.project.stop();
                  } else {
                    $scope.running = true;
                    $scope.runIcon = 'images/stop.svg';
                    
                    $scope.project.run({ path: $scope.dir });
                  }
                }
              saveProject: |
                function() {
                  var fs = require('fs');
                  
                  var config = document.getElementsByClassName('CodeMirror')[0].CodeMirror.getDoc().getValue();
                  fs.writeFileSync($scope.dir + '/.crystal/config.yml', config);
                }
  - generator: authors.AuthorsGenerator
    spec:
      author: $author
      name: $name
      
  - generator: bower.ConfigGenerator
    spec:
      directory: components
        
  - generator: bower.PackageGenerator
    spec:
      name: crystal-studio
      dependencies:
        angular-material: ~0.10.0
        angular-schema-form: ~0.8.4
        angular-ui-codemirror: ~0.3.0
        codemirror: ~5.5.0
        js-yaml: ~3.3.1
  
  - generator: gitignore.GitignoreGenerator
    spec:
      items:
        - components/
        - dist/
        - node_modules/
  
  - generator: license.MITGenerator
    spec:
      copyright: $copyright
  
  - generator: electron.MainGenerator
    spec:
      enableCrashReporter: true
      #enableDevTools: true
      windows:
        - name: main
          default: true
          maximize: true
          url:
            file: index.html
      
  - generator: electron.PackageGenerator
    spec:
      name: crystal-studio
      version: $version
      main: main.js
      productName: Crystal Studio
      dependencies:
        coffee-script: ~1.9.3
        crystal: latest
        user-home: ~2.0.0
      
  - engine: jade.JadeEngine
    filename: index.html
    template: |
      html(ng-app='CrystalApp')
        head
          link(rel='stylesheet', href='components/angular-material/angular-material.min.css')
          link(rel='stylesheet', href='components/codemirror/lib/codemirror.css')
          link(rel='stylesheet', href='components/codemirror/theme/mdn-like.css')
          style(type='text/css').
            md-list-item.selected {
              background-color: #EEE;
            }

            .CodeMirror {
              font-weight: bold;
              height: 100%;
            }
          title Crystal Studio
        body(id='app-controller', layout='row', ng-controller='AppCtrl as ctrl', resize)
          md-sidenav(class='md-sidenav-left md-whiteframe-z2', md-component-id='left')
            md-list(style='padding-top: 0px')
              md-list-item(ng-repeat='folder in folders', ng-click='loadModule(folder)', ng-class='{selected: folder === selectedFolder}')
                div {{ folder }}
                div(flex)
                md-icon(md-svg-icon='images/running.svg', ng-if='runningModules.indexOf(folder) !== -1')
          div(layout='column', flex)
            md-toolbar(style='background-color: #333')
              div(class='md-toolbar-tools')
                //md-menu
                  md-button(class='md-icon-button', aria-label='Open', ng-click='$mdOpenMenu()')
                    md-icon(md-svg-icon='images/open.svg')
                    md-tooltip Open
                  md-menu-content
                    md-menu-item(ng-repeat='value in folders')
                      md-button.
                        <md-icon md-svg-icon="call:dialpad" md-menu-align-target></md-icon>
                        {{value}}
                md-button(class='md-icon-button', aria-label='Open', ng-click='openFile()')
                  md-icon(md-svg-icon='images/open.svg')
                  md-tooltip Open (Cmd + O)
                h2
                  span {{dir}}
                span(flex)
                md-button(class='md-icon-button', aria-label='Save', ng-click='saveProject()')
                  md-icon(md-svg-icon='images/save.svg')
                  md-tooltip Save (Cmd + S)
                md-button(class='md-icon-button', aria-label='Build', ng-click='buildProject()')
                  md-icon(md-svg-icon='images/build.svg')
                  md-tooltip Build (Cmd + B)
                md-button(class='md-icon-button', aria-label='Run', ng-click='runProject()')
                  md-icon(md-svg-icon='{{runIcon}}')
                  md-tooltip Run (Cmd + R)
            md-content(flex)
              div(ui-codemirror='{ lineNumbers: true, mode: "yaml", theme: "mdn-like" }')
          script(src='components/angular/angular.min.js')
          script(src='components/angular-animate/angular-animate.min.js')
          script(src='components/angular-aria/angular-aria.min.js')
          script(src='components/angular-material/angular-material.min.js')
          script(src='components/angular-ui-codemirror/ui-codemirror.js')

          script(src='components/angular-sanitize/angular-sanitize.min.js')
          script(src='components/tv4/tv4.js')
          script(src='components/objectpath/lib/ObjectPath.js')
          script(src='components/angular-schema-form/dist/schema-form.min.js')
          script(src='components/angular-schema-form/dist/bootstrap-decorator.min.js')

          script(src='components/codemirror/lib/codemirror.js')
          script(src='components/codemirror/mode/coffeescript/coffeescript.js')
          script(src='components/codemirror/mode/css/css.js')
          script(src='components/codemirror/mode/dockerfile/dockerfile.js')
          script(src='components/codemirror/mode/django/django.js')
          script(src='components/codemirror/mode/go/go.js')
          script(src='components/codemirror/mode/haml/haml.js')
          script(src='components/codemirror/mode/handlebars/handlebars.js')
          script(src='components/codemirror/mode/jade/jade.js')
          script(src='components/codemirror/mode/javascript/javascript.js')
          script(src='components/codemirror/mode/markdown/markdown.js')
          script(src='components/codemirror/mode/nginx/nginx.js')
          script(src='components/codemirror/mode/php/php.js')
          script(src='components/codemirror/mode/puppet/puppet.js')
          script(src='components/codemirror/mode/python/python.js')
          script(src='components/codemirror/mode/ruby/ruby.js')
          script(src='components/codemirror/mode/sass/sass.js')
          script(src='components/codemirror/mode/shell/shell.js')
          script(src='components/codemirror/mode/sql/sql.js')
          script(src='components/codemirror/mode/swift/swift.js')
          script(src='components/codemirror/mode/xml/xml.js')
          script(src='components/codemirror/mode/yaml/yaml.js')
          script(src='components/js-yaml/dist/js-yaml.js')
          script.
            require('coffee-script').register();
            var remote = require('remote');
            var dialog = remote.require('dialog');
            var shell = remote.require('shell');
            var crystal = require('crystal');

            var Menu = remote.require('menu');

            var template = [
              {
                label: 'Crystal',
                submenu: [
                  {
                    label: 'About Crystal',
                    selector: 'orderFrontStandardAboutPanel:'
                  },
                  {
                    type: 'separator'
                  },
                  {
                    label: 'Hide Crystal',
                    accelerator: 'Command+H',
                    selector: 'hide:'
                  },
                  {
                    label: 'Hide Others',
                    accelerator: 'Command+Shift+H',
                    selector: 'hideOtherApplications:'
                  },
                  {
                    label: 'Show All',
                    selector: 'unhideAllApplications:'
                  },
                  {
                    type: 'separator'
                  },
                  {
                    label: 'Quit',
                    accelerator: 'Command+Q',
                    selector: 'terminate:'
                  }
                ]
              },
              {
                label: 'File',
                submenu: [
                  {
                    label: 'Open',
                    accelerator: 'Command+O',
                    click: function() {
                      angular.element(document.getElementById('app-controller')).scope().openFile();
                    }
                  },
                  {
                    label: 'Save',
                    accelerator: 'Command+S',
                    click: function() {
                      angular.element(document.getElementById('app-controller')).scope().saveProject();
                    }
                  }
                ]
              },
              {
                label: 'Edit',
                submenu: [
                  {
                    label: 'Undo',
                    accelerator: 'Command+Z',
                    selector: 'undo:'
                  },
                  {
                    label: 'Redo',
                    accelerator: 'Shift+Command+Z',
                    selector: 'redo:'
                  },
                  {
                    type: 'separator'
                  },
                  {
                    label: 'Cut',
                    accelerator: 'Command+X',
                    selector: 'cut:'
                  },
                  {
                    label: 'Copy',
                    accelerator: 'Command+C',
                    selector: 'copy:'
                  },
                  {
                    label: 'Paste',
                    accelerator: 'Command+V',
                    selector: 'paste:'
                  },
                  {
                    label: 'Select All',
                    accelerator: 'Command+A',
                    selector: 'selectAll:'
                  }
                ]
              },
              {
                label: 'Project',
                submenu: [
                  {
                    label: 'Build',
                    accelerator: 'Command+B',
                    click: function() {
                      angular.element(document.getElementById('app-controller')).scope().buildProject();
                    }
                  },
                  {
                    label: 'Run',
                    accelerator: 'Command+R',
                    click: function() {
                      angular.element(document.getElementById('app-controller')).scope().runProject();
                    }
                  },
                  {
                    label: 'Show In Finder',
                    click: function() {
                      shell.showItemInFolder(angular.element(document.getElementById('app-controller')).scope().dir + '/.crystal');
                    }
                  }
                ]
              },
              {
                label: 'View',
                submenu: [
                  {
                    label: 'Reload',
                    accelerator: 'Command+R',
                    click: function() { remote.getCurrentWindow().reload(); }
                  },
                  {
                    label: 'Toggle DevTools',
                    accelerator: 'Alt+Command+I',
                    click: function() { remote.getCurrentWindow().toggleDevTools(); }
                  },
                ]
              }
            ];

            var menu = Menu.buildFromTemplate(template);
            Menu.setApplicationMenu(menu);
          script(src='scripts/app.js')
 
  - generator: readme.ReadmeGenerator
    spec:
      name: $name
      description: $description
      sections:
        - title: Install
          content: |
            Use npm to install Crystal Studio:
            
            ```sh
            npm install crystal-studio
            ```
        - title: Run
          content: |
            Use Crystal to run Crystal Studio:
            
            ```sh
            cd /path/to/crystal-studio
            crystal run
            ```
scripts:
  build:
    - bower install
    - npm update
  run:
    - electron .