name: Crystal Studio
description: GUI of [Crystal](https://crystal.sh), the open source code generator for every language and framework
version: 0.1.0
author:
  name: Chris Tate
  email: chris@crystal.sh
  url: http://crystal.sh
copyright: 2015 Crystal
imports:
  crystal/angular: ~0.1.0
  crystal/authors: ~0.2.5
  crystal/bower: ~0.3.5
  crystal/electron: ~0.1.1
  crystal/gitignore: ~0.1.1
  crystal/jade: ~0.1.0
  crystal/json: ~0.3.2
  crystal/license: ~0.2.4
  crystal/npm: ~0.2.5
  crystal/readme: ~0.2.2
outputs:
  - generator: angular.AppGenerator
    filename: scripts/app.js
    spec:
      name: CrystalApp
      requires:
        - ngMaterial
        - ngRoute
        - schemaForm
        - ui.codemirror
      config:
        html5Mode:
          requireBase: false
        requires:
          - $routeProvider
          - $locationProvider
      directives:
        resize: |
          function($window) {
            return function (scope, element) {
              var w = angular.element($window);
              
              w.bind('resize', function () {
                var editor = document.getElementsByClassName('CodeMirror')[0];
                editor.style.height = w[0].outerHeight - 86;
              });
            };
          }
      routes:
        - uri: /app
          controller: 'AppCtrl'
          template: 'app.html'
        - uri: /login
          controller: 'LoginCtrl'
          template: 'login.html'
      controllers:
        AddProjectCtrl:
          requires:
            - $rootScope
            - $scope
          locals:
            $scope:
              add: |
                function() {
                  var request = require('request');
                  
                  request({
                    headers: {
                      'User-Agent': 'Crystal Studio <support@crystal.sh> (https://crystal.sh)'
                    },
                    body: {
                      name: 'test1',
                      description: 'this is a test'
                    },
                    json: true,
                    method: 'POST',
                    uri: 'https://api.github.com/user/repos?access_token=' + window.localStorage.getItem('accessToken')
                  }, function(err, httpResponse, body) {
                    var body = JSON.parse(body);
                  });
                };
              cancel: |
                function() {
                  $mdDialog.cancel();
                };
        AddWorkspaceCtrl:
          requires:
            - $mdDialog
            - $mdSidenav
            - $rootScope
            - $scope
          locals:
            $scope:
              add: |
                function() {
                  $mdDialog.cancel();
                  $mdSidenav('workspace-sidebar').toggle();
                  
                  $rootScope.loadingWorkspaces = true;
                
                  var BrowserWindow = remote.require('browser-window');
                  var query = require('query-string');
                  var request = require('request');
                  
                  // Create the browser window.
                  var loginWindow = new BrowserWindow({
                    'always-on-top': true,
                    width: 800,
                    height: 600,
                    title: ''
                  });

                  loginWindow.webContents.on('will-navigate', function(event, url) {
                    var config = {
                      client_id: process.env.CRYSTAL_STUDIO_GITHUB_CLIENT_ID,
                      client_secret: process.env.CRYSTAL_STUDIO_GITHUB_CLIENT_SECRET
                    };
                    
                    var raw_code = /code=([^&]*)/.exec(url) || null,
                      code = (raw_code && raw_code.length > 1) ? raw_code[1] : null,
                      error = /\?error=(.+)$/.exec(url);
                    
                    if (code || error) {
                      // Close the browser if code found or error
                      loginWindow.close();
                    }
                    
                    // If there is a code in the callback, proceed to get token from github
                    if (code) {
                      console.log({
                        client_id: config.client_id,
                        client_secret: config.client_secret,
                        code: code
                      });
                      request({
                        method: 'POST',
                        uri: 'https://github.com/login/oauth/access_token',
                        form: {
                          client_id: config.client_id,
                          client_secret: config.client_secret,
                          code: code
                        },
                      }, function(err, httpResponse, body) {
                        var body = query.parse(body);
                        var accessToken = body.access_token;
                        
                        request({
                          headers: {
                            'User-Agent': 'Crystal Studio <support@crystal.sh> (https://crystal.sh)'
                          },
                          method: 'GET',
                          uri: 'https://api.github.com/user?access_token=' + accessToken
                        }, function(err, httpResponse, body) {
                          var body = JSON.parse(body);
                          
                          $rootScope.workspaces.push({
                            icon: 'github',
                            name: body.login
                          })
                          
                          window.localStorage.setItem('accessToken', accessToken);
                          
                          $rootScope.loadingWorkspaces = false;
                        });
                      });
                    } else if (error) {
                      alert("Oops! Something went wrong and we couldn't log you in using Github. Please try again.");
                    }
                  });

                  loginWindow.loadUrl('https://github.com/login/oauth/authorize?client_id=4fa99694428b1b3ea68f&scope=user,repo');
                };
              cancel: |
                function() {
                  $mdDialog.cancel();
                };
        AppCtrl:
          requires:
            - $http
            - $mdDialog
            - $mdSidenav
            - $rootScope
            - $route
            - $scope
            - $window
            - schemaForm
          locals:
            $scope:
              load: |
                function() {
                  $rootScope.loadingWorkspaces = false;
                
                  $rootScope.workspaces = window.localStorage.getItem('workspaces');
                  $rootScope.selectedWorkspace = window.localStorage.getItem('selectedWorkspace');
                  if (!$rootScope.workspaces) {
                    $rootScope.workspaces = [{
                      icon: 'folder',
                      name: '/Users/ctate/.crystal/studio'
                    }];
                  }
                  if (!$rootScope.selectedWorkspace) {
                    $rootScope.selectedWorkspace = $rootScope.workspaces[0];
                  }
                  
                  $rootScope.projects = window.localStorage.getItem('projects');
                  $rootScope.selectedProject = window.localStorage.getItem('selectedProject');
                  if (!$rootScope.projects) {
                    $rootScope.projects = [];
                  }
                  if ($rootScope.projects.length && !$rootScope.selectedProject) {
                    $rootScope.selectedProject = $rootScope.projects[0];
                  }
                  
                  console.log($rootScope.workspaces);
                  console.log($rootScope.selectedWorkspace);
                  console.log($rootScope.projects);
                  console.log($rootScope.selectedProject);
                  
                  return;
                  
                  var request = require('request');
                  
                  request({
                    headers: {
                      'User-Agent': 'Crystal Studio <support@crystal.sh> (https://crystal.sh)'
                    },
                    method: 'GET',
                    uri: 'https://api.github.com/user?access_token=' + window.localStorage.getItem('accessToken')
                  }, function(err, httpResponse, body) {
                    var body = JSON.parse(body);
                    $rootScope.workspaces = [{
                      icon: 'github',
                      name: body.login,
                      type: 'user'
                    }];
                    $rootScope.selectedWorkspace = $rootScope.workspaces[0];
                    
                    request({
                      headers: {
                        'User-Agent': 'Crystal Studio <support@crystal.sh> (https://crystal.sh)'
                      },
                      method: 'GET',
                      uri: 'https://api.github.com/user/orgs?access_token=' + window.localStorage.getItem('accessToken')
                    }, function(err, httpResponse, body) {
                      var body = JSON.parse(body);
                      for (var i = 0; i < body.length; i++) {
                        $rootScope.workspaces.push({
                          icon: 'github',
                          name: body[i].login,
                          type: 'org'
                        });
                      }
                      
                      request({
                        headers: {
                          'User-Agent': 'Crystal Studio <support@crystal.sh> (https://crystal.sh)'
                        },
                        method: 'GET',
                        uri: 'https://api.github.com/user/repos?access_token=' + window.localStorage.getItem('accessToken')
                      }, function(err, httpResponse, body) {
                        var body = JSON.parse(body);
                        for (var i = 0; i < body.length; i++) {
                          $rootScope.projects.push({
                            name: body[i].login,
                            type: 'org'
                          });
                        }
                        
                        $rootScope.selectedProject = $rootScope.projects[0];
                      });
                    });
                  });
                  
                  return true;
                }
              loaded: $scope.load()
              branch: "'master'"
              dir: process.cwd()
              runIcon: "'images/run.svg'"
              runningModules: '[]'
              username: "'Login with GitHub'"
              login: |
                function(ev) {
                  $mdDialog.show(
                    $mdDialog.alert()
                      .parent(angular.element(document.querySelector('#popupContainer')))
                      .clickOutsideToClose(true)
                      .title('Crystal')
                      .content('Login to Crystal with your GitHub account.')
                      .ok('Login')
                      .targetEvent(ev)
                  ).then(function() {
                    window.location.href = 'https://github.com/login/oauth/authorize?client_id=b15727baac5a27dcec10&redirect_uri=https://crystal.sh/accounts/connect/github&scope=user,repo';
                  });
                };
              
              #
              # Workspaces
              #
              
              addWorkspace: |
                function(ev) {
                  $mdSidenav('workspace-sidebar').toggle();
                  
                  $mdDialog.show({
                    controller: 'AddWorkspaceCtrl',
                    templateUrl: 'partials/addWorkspace.tmpl.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true
                  })
                  .then(function(answer) {
                    
                  }, function() {
                    
                  });
                }
              
              loadWorkspace: |
                function(workspace) {
                  $rootScope.selectedWorkspace = workspace;
                  window.localStorage.setItem('workspace', workspace.name);
                  $mdSidenav('workspace-sidebar').toggle();
                }
              switchWorkspace: |
                function() {
                  $mdSidenav('workspace-sidebar').toggle();
                };
                
              #
              # Projects
              #
              
              addProject: |
                function(ev) {
                  $mdSidenav('project-sidebar').toggle();
                  
                  $mdDialog.show({
                    controller: 'AddProjectCtrl',
                    templateUrl: 'partials/addRepo.tmpl.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true
                  })
                  .then(function(answer) {
                    
                  }, function() {
                    
                  });
                }
              
              buildProject: |
                function(ev) {
                  $scope.alert = $mdDialog.alert()
                    .parent(angular.element(document.body))
                    .title('Building...')
                    .targetEvent(ev);
                  $mdDialog.show($scope.alert);
                  
                  $scope.project.build({
                    complete: function() {
                      $mdDialog.hide($scope.alert, 'finish');
                    }
                  });
                }
              
              loadProject: |
                function(folder) {
                  $mdSidenav('left').toggle();
                  
                  window.localStorage.setItem('project', folder);
                  
                  var fs = require('fs'),
                    git = require('gift'),
                    path = require('path'),
                    userHome = require('user-home');
                  var workspace = path.join(userHome, '.crystal/studio');
                  var module_path = path.join(workspace, $rootScope.selectedAccount.name, folder, 'master');
                  
                  function load() {
                    $scope.dir = folder;
                    $scope.path = module_path;
                    $scope.project = new crystal(module_path);
                    $scope.selectedFolder = folder;
                    
                    $scope.config = $scope.project.config;
                    console.log($scope.config);
                    
                    if ($scope.runningModules.indexOf(folder) !== -1) {
                      $scope.runIcon = 'images/stop.svg';
                    } else { 
                      $scope.runIcon = 'images/run.svg';
                    }
                    
                    var yaml = fs.readFileSync(module_path + '/.crystal/config.yml', 'utf-8');
                    var editor = document.getElementsByClassName('CodeMirror')[0].CodeMirror;
                    editor.setValue(yaml);
                    
                    angular.element($window).trigger('resize');
                  };
                  
                  if (!fs.existsSync(module_path)) {
                    git.clone('https://github.com/' + folder, module_path, function(err, _repo) {
                      load();
                    });
                  } else {
                    load();
                  }
                };
              runProject: |
                function(ev) {
                  $scope.runningModules.push($scope.selectedFolder);
                  
                  if ($scope.running) {
                    $scope.running = false;
                    $scope.runIcon = 'images/run.svg';
                    $scope.project.stop();
                  } else {
                    $scope.running = true;
                    $scope.runIcon = 'images/stop.svg';
                    
                    $scope.project.run();
                  }
                }
              saveProject: |
                function() {
                  var fs = require('fs');
                  
                  var config = document.getElementsByClassName('CodeMirror')[0].CodeMirror.getDoc().getValue();
                  fs.writeFileSync($scope.path + '/.crystal/config.yml', config);
                }
              switchProject: |
                function() {
                  $mdSidenav('project-sidebar').toggle();
                };
              uploadProject: |
                function(ev) {
                  $mdDialog.show({
                    controller: 'AddRepoCtrl',
                    templateUrl: 'partials/upload.tmpl.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true
                  })
                  .then(function(answer) {
                    
                  }, function() {
                    
                  });
                }
            
  - generator: authors.AuthorsGenerator
    spec:
      author: $author
      name: $name
      
  - generator: bower.ConfigGenerator
    spec:
      directory: components
        
  - generator: bower.PackageGenerator
    spec:
      name: crystal-studio
      dependencies:
        angular-material: ~0.10.0
        angular-route: 1.4.3
        angular-schema-form: ~0.8.4
        angular-ui-codemirror: ~0.3.0
        codemirror: ~5.5.0
        js-yaml: ~3.3.1
  
  - generator: gitignore.GitignoreGenerator
    spec:
      items:
        - components/
        - dist/
        - node_modules/
  
  - generator: license.MITGenerator
    spec:
      copyright: $copyright
  
  - generator: electron.MainGenerator
    spec:
      modules:
        query: query-string
        request: request
      enableCrashReporter: true
      enableDevTools: true
      windows:
        - name: login
          always-on-top: true
          url: "'https://github.com/login/oauth/authorize?client_id=4fa99694428b1b3ea68f&scope=user,repo'"
          node-integration: false
          events:
            will-navigate: |
              function(event, url) {
                var config = {
                  client_id: process.env.CRYSTAL_STUDIO_GITHUB_CLIENT_ID,
                  client_secret: process.env.CRYSTAL_STUDIO_GITHUB_CLIENT_SECRET
                };
                
                console.log(url);
                
                var raw_code = /code=([^&]*)/.exec(url) || null,
                  code = (raw_code && raw_code.length > 1) ? raw_code[1] : null,
                  error = /\?error=(.+)$/.exec(url);
                
                if (code || error) {
                  // Close the browser if code found or error
                  loginWindow.close();
                }
                
                // If there is a code in the callback, proceed to get token from github
                if (code) {
                  console.log({
                    client_id: config.client_id,
                    client_secret: config.client_secret,
                    code: code
                  });
                  request({
                    method: 'POST',
                    uri: 'https://github.com/login/oauth/access_token',
                    form: {
                      client_id: config.client_id,
                      client_secret: config.client_secret,
                      code: code
                    },
                  }, function(err, httpResponse, body) {
                    var body = query.parse(body);
                    var accessToken = body.access_token;
                    
                    request({
                      headers: {
                        'User-Agent': 'Crystal Studio <support@crystal.sh> (https://crystal.sh)'
                      },
                      method: 'GET',
                      uri: 'https://api.github.com/user?access_token=' + accessToken
                    }, function(err, httpResponse, body) {
                      var body = JSON.parse(body);
                      mainWindow.webContents.executeJavaScript("angular.element(document.getElementById('app-controller')).scope().username = '" + body.login + "';");
                      mainWindow.webContents.executeJavaScript("angular.element(document.getElementById('app-controller')).scope().$apply();");
                      mainWindow.webContents.executeJavaScript("window.localStorage.setItem('accessToken', '" + accessToken + "');");
                    });
                  });
                } else if (error) {
                  alert("Oops! Something went wrong and we couldn't log you in using Github. Please try again.");
                }
              }
        - name: main
          default: true
          maximize: true
          url:
            file: index.html
      
  - generator: electron.PackageGenerator
    spec:
      name: crystal-studio
      version: $version
      main: main.js
      productName: Crystal Studio
      dependencies:
        coffee-script: ~1.9.3
        crystal: latest
        gift: ~0.6.1
        query-string: ~2.3.0
        request: ~2.61.0
        user-home: ~2.0.0
      
  - engine: jade.JadeEngine
    filename: index.html
    template: index.jade
  
  - generator: readme.ReadmeGenerator
    spec:
      name: $name
      description: $description
      badges:
        - image: https://img.shields.io/badge/crystal-api-lightgrey.svg?style=flat-square
          text: Crystal API
          url: https://github.com/crystal/crystal-api
        - image: https://img.shields.io/badge/crystal-cli-lightgrey.svg?style=flat-square
          text: Crystal CLI
          url: https://github.com/crystal/crystal-cli
        - image: https://img.shields.io/badge/crystal-js-lightgray.svg?style=flat-square
          text: Crystal JS
          url: https://github.com/crystal/crystal
        - image: https://img.shields.io/badge/crystal-hub-lightgrey.svg?style=flat-square
          text: Crystal Hub
          url: https://github.com/crystal/crystal-hub
        - image: https://img.shields.io/badge/crystal-studio-9b30ff.svg?style=flat-square
          text: Crystal Studio
          url: https://github.com/crystal/crystal-studio
        - image: https://img.shields.io/badge/crystal-web-lightgrey.svg?style=flat-square
          text: Crystal Web
          url: https://github.com/crystal/crystal-web
      sections:
        - title: Install
          content: |
            Clone from GitHub:
            
            ```sh
            git clone https://github.com/crystal/crystal-studio
            ```
        - title: Run
          content: |
            Use [Crystal CLI](https://github.com/crystal/crystal-cli) to run Crystal Studio:
            
            ```sh
            cd crystal/crystal-studio
            crystal run
            ```
scripts:
  build:
    - bower install
    - npm update
  run:
    - electron .